<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!--NewPage-->
<HTML>
<HEAD>
<!-- Generated by javadoc (build 1.6.0_23) on Tue Feb 21 07:54:33 EST 2012 -->
<TITLE>
Stage
</TITLE>

<META NAME="date" CONTENT="2012-02-21">

<LINK REL ="stylesheet" TYPE="text/css" HREF="../../stylesheet.css" TITLE="Style">

<SCRIPT type="text/javascript">
function windowTitle()
{
    if (location.href.indexOf('is-external=true') == -1) {
        parent.document.title="Stage";
    }
}
</SCRIPT>
<NOSCRIPT>
</NOSCRIPT>

</HEAD>

<BODY BGCOLOR="white" onload="windowTitle();">
<HR>


<!-- ========= START OF TOP NAVBAR ======= -->
<A NAME="navbar_top"><!-- --></A>
<A HREF="#skip-navbar_top" title="Skip navigation links"></A>
<TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0" SUMMARY="">
<TR>
<TD COLSPAN=2 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
<A NAME="navbar_top_firstrow"><!-- --></A>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
  <TR ALIGN="center" VALIGN="top">
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="class-use/Stage.html"><FONT CLASS="NavBarFont1"><B>Use</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../index-files/index-1.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
  </TR>
</TABLE>
</TD>
<TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
</EM>
</TD>
</TR>

<TR>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
&nbsp;<A HREF="../../pds/sim/Simulation.html" title="class in pds.sim"><B>PREV CLASS</B></A>&nbsp;
&nbsp;<A HREF="../../pds/sim/Worker.html" title="interface in pds.sim"><B>NEXT CLASS</B></A></FONT></TD>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
  <A HREF="../../index.html?pds/sim/Stage.html" target="_top"><B>FRAMES</B></A>  &nbsp;
&nbsp;<A HREF="Stage.html" target="_top"><B>NO FRAMES</B></A>  &nbsp;
&nbsp;<SCRIPT type="text/javascript">
  <!--
  if(window==top) {
    document.writeln('<A HREF="../../allclasses-noframe.html"><B>All Classes</B></A>');
  }
  //-->
</SCRIPT>
<NOSCRIPT>
  <A HREF="../../allclasses-noframe.html"><B>All Classes</B></A>
</NOSCRIPT>


</FONT></TD>
</TR>
<TR>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
  SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
DETAIL:&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
</TR>
</TABLE>
<A NAME="skip-navbar_top"></A>
<!-- ========= END OF TOP NAVBAR ========= -->

<HR>
<!-- ======== START OF CLASS DATA ======== -->
<H2>
<FONT SIZE="-1">
pds.sim</FONT>
<BR>
Class Stage</H2>
<PRE>
java.lang.Object
  <IMG SRC="../../resources/inherit.gif" ALT="extended by ">java.util.concurrent.CopyOnWriteArrayList&lt;<A HREF="../../pds/sim/Worker.html" title="interface in pds.sim">Worker</A>&gt;
      <IMG SRC="../../resources/inherit.gif" ALT="extended by "><B>pds.sim.Stage</B>
</PRE>
<DL>
<DT><B>All Implemented Interfaces:</B> <DD>java.io.Serializable, java.lang.Cloneable, java.lang.Iterable&lt;<A HREF="../../pds/sim/Worker.html" title="interface in pds.sim">Worker</A>&gt;, java.util.Collection&lt;<A HREF="../../pds/sim/Worker.html" title="interface in pds.sim">Worker</A>&gt;, java.util.List&lt;<A HREF="../../pds/sim/Worker.html" title="interface in pds.sim">Worker</A>&gt;, java.util.RandomAccess</DD>
</DL>
<HR>
<DL>
<DT><PRE>public class <B>Stage</B><DT>extends java.util.concurrent.CopyOnWriteArrayList&lt;<A HREF="../../pds/sim/Worker.html" title="interface in pds.sim">Worker</A>&gt;</DL>
</PRE>

<P>
<DL>
<DT><B>Author:</B></DT>
  <DD>kmc8206
 Class to act as a certain stage in the order process (ex. Preparation Stage, Cooking Stage, Delivery Stage)</DD>
<DT><B>See Also:</B><DD><A HREF="../../serialized-form.html#pds.sim.Stage">Serialized Form</A></DL>
<HR>

<P>

<!-- ======== CONSTRUCTOR SUMMARY ======== -->

<A NAME="constructor_summary"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
<B>Constructor Summary</B></FONT></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><B><A HREF="../../pds/sim/Stage.html#Stage(java.lang.String, int, int, boolean)">Stage</A></B>(java.lang.String&nbsp;name,
      int&nbsp;nWorkers,
      int&nbsp;size,
      boolean&nbsp;byOrder)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
</TABLE>
&nbsp;
<!-- ========== METHOD SUMMARY =========== -->

<A NAME="method_summary"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
<B>Method Summary</B></FONT></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../pds/sim/Stage.html#addOrder(pds.order.Order)">addOrder</A></B>(<A HREF="../../pds/order/Order.html" title="class in pds.order">Order</A>&nbsp;order)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Adds an order into the stage waiting queue and sets the state to waiting.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.util.concurrent.CopyOnWriteArrayList&lt;<A HREF="../../pds/order/Order.html" title="class in pds.order">Order</A>&gt;</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../pds/sim/Stage.html#getFinishedQueue()">getFinishedQueue</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;returns the list of finished orders in the stage</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../pds/sim/Stage.html#getName()">getName</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets the name of the stage (ex.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../pds/sim/Stage.html#getWorkerSize()">getWorkerSize</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets how much space each worker in the stage can hold</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../pds/sim/Stage.html#isByOrder()">isByOrder</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Determines whether or not the stage works by order or by item (true if by order, false is by item)
 This is the difference between a Chef who works on individual orders at a time and an Oven which works on separate items at once</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../pds/sim/Stage.html#removeOrder(pds.order.Order)">removeOrder</A></B>(<A HREF="../../pds/order/Order.html" title="class in pds.order">Order</A>&nbsp;o)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The stage checks which queue the order is in (waiting queue/processing queue/finished queue), removes it from that queue and sets it's state to "Deleted" so it can either be moved to the next stage by the Simulation or just remain a completed order</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../pds/sim/Stage.html#removeSameItems(pds.order.Order)">removeSameItems</A></B>(<A HREF="../../pds/order/Order.html" title="class in pds.order">Order</A>&nbsp;o)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Helper function to remove the items from an itemworker when given a certain order.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../pds/sim/Stage.html#tick()">tick</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tick method that runs through all of the works and their orders to update the stage times of the items and determine if the items are finished and can move on to the next stage or if they are still processing.</TD>
</TR>
</TABLE>
&nbsp;<A NAME="methods_inherited_from_class_java.util.concurrent.CopyOnWriteArrayList"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
<TH ALIGN="left"><B>Methods inherited from class java.util.concurrent.CopyOnWriteArrayList</B></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE>add, add, addAll, addAll, addAllAbsent, addIfAbsent, clear, clone, contains, containsAll, equals, get, hashCode, indexOf, indexOf, isEmpty, iterator, lastIndexOf, lastIndexOf, listIterator, listIterator, remove, remove, removeAll, retainAll, set, size, subList, toArray, toArray, toString</CODE></TD>
</TR>
</TABLE>
&nbsp;<A NAME="methods_inherited_from_class_java.lang.Object"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
<TH ALIGN="left"><B>Methods inherited from class java.lang.Object</B></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE>getClass, notify, notifyAll, wait, wait, wait</CODE></TD>
</TR>
</TABLE>
&nbsp;
<P>

<!-- ========= CONSTRUCTOR DETAIL ======== -->

<A NAME="constructor_detail"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="1"><FONT SIZE="+2">
<B>Constructor Detail</B></FONT></TH>
</TR>
</TABLE>

<A NAME="Stage(java.lang.String, int, int, boolean)"><!-- --></A><H3>
Stage</H3>
<PRE>
public <B>Stage</B>(java.lang.String&nbsp;name,
             int&nbsp;nWorkers,
             int&nbsp;size,
             boolean&nbsp;byOrder)</PRE>
<DL>
</DL>

<!-- ============ METHOD DETAIL ========== -->

<A NAME="method_detail"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="1"><FONT SIZE="+2">
<B>Method Detail</B></FONT></TH>
</TR>
</TABLE>

<A NAME="getName()"><!-- --></A><H3>
getName</H3>
<PRE>
public java.lang.String <B>getName</B>()</PRE>
<DL>
<DD>Gets the name of the stage (ex. Cooking Stage)
<P>
<DD><DL>

<DT><B>Returns:</B><DD>String name</DL>
</DD>
</DL>
<HR>

<A NAME="getWorkerSize()"><!-- --></A><H3>
getWorkerSize</H3>
<PRE>
public int <B>getWorkerSize</B>()</PRE>
<DL>
<DD>Gets how much space each worker in the stage can hold
<P>
<DD><DL>

<DT><B>Returns:</B><DD>Integer size</DL>
</DD>
</DL>
<HR>

<A NAME="isByOrder()"><!-- --></A><H3>
isByOrder</H3>
<PRE>
public boolean <B>isByOrder</B>()</PRE>
<DL>
<DD>Determines whether or not the stage works by order or by item (true if by order, false is by item)
 This is the difference between a Chef who works on individual orders at a time and an Oven which works on separate items at once
<P>
<DD><DL>

<DT><B>Returns:</B><DD>Boolean byOrder</DL>
</DD>
</DL>
<HR>

<A NAME="removeOrder(pds.order.Order)"><!-- --></A><H3>
removeOrder</H3>
<PRE>
public void <B>removeOrder</B>(<A HREF="../../pds/order/Order.html" title="class in pds.order">Order</A>&nbsp;o)
                 throws java.lang.Exception</PRE>
<DL>
<DD>The stage checks which queue the order is in (waiting queue/processing queue/finished queue), removes it from that queue and sets it's state to "Deleted" so it can either be moved to the next stage by the Simulation or just remain a completed order
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>o</CODE> - - Order
<DT><B>Throws:</B>
<DD><CODE>java.lang.Exception</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="addOrder(pds.order.Order)"><!-- --></A><H3>
addOrder</H3>
<PRE>
public void <B>addOrder</B>(<A HREF="../../pds/order/Order.html" title="class in pds.order">Order</A>&nbsp;order)
              throws java.lang.NullPointerException</PRE>
<DL>
<DD>Adds an order into the stage waiting queue and sets the state to waiting. On the next tick the Simulation will know to move it into the preparation queue if there is an available worker
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>order</CODE> - - Order
<DT><B>Throws:</B>
<DD><CODE>java.lang.NullPointerException</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="getFinishedQueue()"><!-- --></A><H3>
getFinishedQueue</H3>
<PRE>
public java.util.concurrent.CopyOnWriteArrayList&lt;<A HREF="../../pds/order/Order.html" title="class in pds.order">Order</A>&gt; <B>getFinishedQueue</B>()</PRE>
<DL>
<DD>returns the list of finished orders in the stage
<P>
<DD><DL>

<DT><B>Returns:</B><DD>CopyOnWriteArrayList<Order> finishedQueue</DL>
</DD>
</DL>
<HR>

<A NAME="tick()"><!-- --></A><H3>
tick</H3>
<PRE>
public void <B>tick</B>()</PRE>
<DL>
<DD>tick method that runs through all of the works and their orders to update the stage times of the items and determine if the items are finished and can move on to the next stage or if they are still processing. Depending on whether or not the worker is an item worker or an order worker, the tick method updates the orders differently.
<P>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="removeSameItems(pds.order.Order)"><!-- --></A><H3>
removeSameItems</H3>
<PRE>
public void <B>removeSameItems</B>(<A HREF="../../pds/order/Order.html" title="class in pds.order">Order</A>&nbsp;o)</PRE>
<DL>
<DD>Helper function to remove the items from an itemworker when given a certain order.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>o</CODE> - -Order</DL>
</DD>
</DL>
<!-- ========= END OF CLASS DATA ========= -->
<HR>


<!-- ======= START OF BOTTOM NAVBAR ====== -->
<A NAME="navbar_bottom"><!-- --></A>
<A HREF="#skip-navbar_bottom" title="Skip navigation links"></A>
<TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0" SUMMARY="">
<TR>
<TD COLSPAN=2 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
<A NAME="navbar_bottom_firstrow"><!-- --></A>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
  <TR ALIGN="center" VALIGN="top">
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="class-use/Stage.html"><FONT CLASS="NavBarFont1"><B>Use</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../index-files/index-1.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
  </TR>
</TABLE>
</TD>
<TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
</EM>
</TD>
</TR>

<TR>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
&nbsp;<A HREF="../../pds/sim/Simulation.html" title="class in pds.sim"><B>PREV CLASS</B></A>&nbsp;
&nbsp;<A HREF="../../pds/sim/Worker.html" title="interface in pds.sim"><B>NEXT CLASS</B></A></FONT></TD>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
  <A HREF="../../index.html?pds/sim/Stage.html" target="_top"><B>FRAMES</B></A>  &nbsp;
&nbsp;<A HREF="Stage.html" target="_top"><B>NO FRAMES</B></A>  &nbsp;
&nbsp;<SCRIPT type="text/javascript">
  <!--
  if(window==top) {
    document.writeln('<A HREF="../../allclasses-noframe.html"><B>All Classes</B></A>');
  }
  //-->
</SCRIPT>
<NOSCRIPT>
  <A HREF="../../allclasses-noframe.html"><B>All Classes</B></A>
</NOSCRIPT>


</FONT></TD>
</TR>
<TR>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
  SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
DETAIL:&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
</TR>
</TABLE>
<A NAME="skip-navbar_bottom"></A>
<!-- ======== END OF BOTTOM NAVBAR ======= -->

<HR>

</BODY>
</HTML>
